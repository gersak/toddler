{:version 1, :namespaces {toddler.table {:css [], :ns toddler.table, :ns-meta {}, :require-aliases {str clojure.string, d helix.dom, hooks helix.hooks, c helix.children, ui toddler.ui, toddler toddler.core, layout toddler.layout}, :requires [clojure.string goog.string helix.dom helix.core helix.hooks helix.children toddler.i18n toddler.ui toddler.core toddler.layout], :refer {defhook {:require helix.core, :sym defhook}, defnc {:require helix.core, :sym defnc}, memo {:require helix.core, :sym memo}, create-context {:require helix.core, :sym create-context}, $ {:require helix.core, :sym $}, <> {:require helix.core, :sym <>}, provider {:require helix.core, :sym provider}}}, toddler.i18n.number {:css [], :ns toddler.i18n.number, :ns-meta {}, :require-aliases {i18n toddler.i18n}, :requires [goog.object clojure.string clojure.set toddler.i18n goog.i18n.NumberFormat goog.i18n.NumberFormatSymbols]}, toddler.css {:css [], :ns toddler.css, :ns-meta {}, :require-aliases {}, :requires []}, toddler.ui.elements {:css [{:line 39, :column 18, :end-line 42, :end-column 86, :form [{:transition "box-shadow 0.3s ease-in-out"} ["&.shadow-top:before" {:z-index "100", :opacity "1 !important"}] ["&.shadow-bottom:after" {:z-index "100", :opacity "1 !important"}]]} {:line 46, :column 17, :end-line 46, :end-column 63, :form [["& .simplebar-track" {:display "none"}]]} {:line 122, :column 18, :end-line 124, :end-column 33, :form [:border-0 :outline-none]} {:line 130, :column 18, :end-line 131, :end-column 40, :form [{:outline "none", :border "none"}]} {:line 136, :column 18, :end-line 147, :end-column 76, :form [:flex :border :border-normal {:min-height "2em"} ["& button" :px-2 {:min-width "6em"}] ["& button:hover" :color++] ["& button:not(:last-child)" :border-r :border-normal] :button:first-of-type {:border-top-left-radius "4px", :border-bottom-left-radius "4px"} :button:last-of-type {:border-top-right-radius "4px", :border-bottom-right-radius "4px"}]} {:line 156, :column 3, :end-line 188, :end-column 37, :form [:flex :text-xs :justify-center :items-center :px-2 :leading-loose :mx-2 :my-2 :button-neutral :animate-border-click :font-semibold ["&:hover" :button-neutral-hover] {:transition "all .2s ease-in", :border-radius "0.25rem"} {:justify-content "center", :min-height "2rem", :min-width "80px", :cursor "pointer", :user-select "none"} ["&:hover" :border-highlighted] ["&.positive" :button-positive] ["&.positive:hover" :button-positive-hover] ["&.negative" :button-negative] ["&.negative:hover" :button-negative-hover] ["&[disabled]" :button-disabled]]} {:line 204, :column 3, :end-line 218, :end-column 36, :form [:flex :text-sm :select-none :cursor-pointer :justify-center :items-center :relative :py-3 :body-text-md :text-normal {:transition "color .3s ease-in-out"} ["& .icon" :mr-1 :w-4 :h-4] ["&[disabled]" :cursor-default]]} {:line 259, :column 3, :end-line 261, :end-column 68, :form [["& .row .name" :text-neutral-400] ["& .row.selected .name, & .row:hover .name" :text-neutral-600]]} {:line 309, :column 3, :end-line 322, :end-column 23, :form [["&.toddler-labeled-row" :flex :flex-col] ["&.toddler-labeled-row > .toddler-row-label" :font-bold :m-1 {:text-transform "uppercase", :font-size "1em"}] ["&.toddler-row, & .toddler-row" :m-1 {:display "flex", :flex-direction "row", :align-items "center", :flex-grow "1"}]]} {:line 328, :column 17, :end-line 332, :end-column 35, :form [{:display "flex", :flex-direction "row", :align-items "center", :flex-grow "1"}]} {:line 333, :column 16, :end-line 333, :end-column 53, :form [{:justify-content "flex-start"}]} {:line 334, :column 17, :end-line 334, :end-column 50, :form [{:justify-content "center"}]} {:line 335, :column 14, :end-line 335, :end-column 49, :form [{:justify-content "flex-end"}]} {:line 336, :column 18, :end-line 336, :end-column 58, :form [{:justify-content "space-between"}]} {:line 344, :column 20, :end-line 351, :end-column 50, :form [:flex :flex-col ["& .label" :text-normal :font-bold :select-none {:text-transform "uppercase", :font-size "0.75rem"}]]} {:line 371, :column 3, :end-line 380, :end-column 29, :form [:flex :flex-col :grow :stretch ["& > .toddler-column-label" {:margin "4px 4px 4px 4px", :padding-bottom "2px", :text-transform "uppercase", :font-size "0.75rem"}]]} {:line 420, :column 17, :end-line 430, :end-column 42, :form [{:display "flex", :flex-direction "column", :flex-grow "1"} ["& > .toddler-column-label" :select-none :font-bold {:margin "4px 4px 4px 4px", :padding-bottom "2px", :text-transform "uppercase", :font-size "0.75em"}]]} {:line 431, :column 16, :end-line 431, :end-column 53, :form [{:justify-content "flex-start"}]} {:line 432, :column 17, :end-line 432, :end-column 50, :form [{:justify-content "center"}]} {:line 433, :column 14, :end-line 433, :end-column 49, :form [{:justify-content "flex-end"}]} {:line 434, :column 18, :end-line 434, :end-column 58, :form [{:justify-content "space-between"}]} {:line 454, :column 3, :end-line 493, :end-column 27, :form [:relative :flex :flex-col :m-0 :rounded-md :border {:background-color "var(--dropdown-bg)", :border-color "var(--dropdown-border)"} ["& .simplebar-scrollbar:before" :pointer-events-none {:max-height "400px"}] ["& .toddler-dropdown-option" :p-2 :flex :justify-start :items-center :cursor-pointer :rounded-sm :text-xs :border-t :border-normal :color- :font-semibold {:background "transparent", :transition "color .2s ease-in,background-color .2s ease-in"}] ["& .toddler-dropdown-option .avatar" {:background "var(--avatar-bg)"} :rounded-sm :mr-2] ["& .toddler-dropdown-option:hover" :color++] ["& .toddler-dropdown-option.selected" :color+] ["& .toddler-dropdown-option:first-child" {:border-top "none"}]]} {:line 514, :column 28, :end-line 516, :end-column 68, :form [["& .simplebar-content" :flex :flex-col] ["& .simplebar-content-wrapper" :pr-2]]} {:line 525, :column 28, :end-line 526, :end-column 70, :form [["& .simplebar-content" :flex :flex-col]]} {:line 577, :column 3, :end-line 613, :end-column 88, :form [:flex :justify-center :items-center :select-none :text-xxxs :uppercase :font-semibold {:padding-left "12px", :padding-right "12px", :min-height "26px", :border-radius "0.25rem"} :color :border :border-normal :cursor-pointer {:color "var(--tag-color-normal)", :background-color "var(--tag-bg-normal)", :border-color "var(--tag-border-normal)"} ["&:hover" {:border-color "var(--tag-border-normal-hover)"}] ["& .avatar" :mr-2 :rounded-sm {:background-color "var(--avatar-bg)", :margin-left "-0.5rem"}] ["&.negative" {:color "var(--tag-color-negative)", :background-color "var(--tag-bg-negative)", :border-color "var(--tag-border-negative)"}] ["&.negative:hover" {:border-color "var(--tag-border-negative-hover)"}] ["&.positive" {:color "var(--tag-color-positive)", :background-color "var(--tag-bg-positive)", :border-color "var(--tag-border-positive)"}] ["&.positive:hover" {:border-color "var(--tag-border-positive-hover)"}] ["&.fun" {:color "var(--tag-color-negative)", :background-color "var(--tag-bg-negative)"}] ["&.selected" :border-normal+] ["& .remove" :w-4 :h-4 {:opacity "0.6"}] ["& .remove:hover" {:color "var(--tag-remove-hover)", :opacity "1"}] ["&.positive .remove:hover" {:color "var(--tag-positive-remove-hover) !important"}] ["&.negative .remove:hover" {:color "var(--tag-negative-remove-hover) !important"}]]} {:line 616, :column 3, :end-line 654, :end-column 52, :form [:box-border :justify-center :items-center :shadow-md :border :text-normal :border-normal :select-none {:color "var(--tooltip-color)", :font-size "0.625rem", :font-weight "600", :background-color "var(--tooltip-bg)", :padding-right "1rem", :padding-top "0.375rem", :padding-left "1rem", :opacity "0", :padding-bottom "0.375rem", :border "1px solid var(--tooltip-border) ", :border-radius "5px"} ["&.success, &.positive" {:background-color "var(--tooltip-positive)", :color "var(--tooltip-positive-text)", :border-color "var(--tooltip-positive-border)"}] ["&.warn, &.warning,  &.danger" {:background-color "var(--tooltip-warn)", :color "var(--tooltip-warn-text)", :border-color "var(--tooltip-warn-border)"}] ["&.error, &.negative" {:background-color "var(--tooltip-negative)", :color "var(--tooltip-negative-text)", :border-color "var(--tooltip-negative-border)"}] ["&.exception" {:background-color "var(--tooltip-exception)", :color "var(--tooltip-exception-text)", :border-color "var(--tooltip-exception-border)"}] ["& pre" {:font-size "0.625rem", :font-weight "600"}] ["&.show" {:transform "scale(1)", :opacity "1"}]]} {:line 713, :column 21, :end-line 719, :end-column 46, :form [{:height "32px", :width "32px", :display "flex", :justify-content "center", :align-items "center", :border-radius "32px"}]} {:line 720, :column 20, :end-line 731, :end-column 47, :form [{:align-items "center", :color "#929292", :transition "color,background-color .2s ease-in-out", :width "26px", :cursor "pointer", :justify-content "center", :display "flex", :border-radius "26px", :height "26px"} ["& svg" {:height "14px", :width "14px"}]]} {:line 732, :column 21, :end-line 734, :end-column 43, :form [[:hover :bg-cyan-500 {:color "#fff8f3"}]]} {:line 735, :column 22, :end-line 737, :end-column 44, :form [[:hover :bg-red-500 {:color "#fff8f3"}]]} {:line 751, :column 17, :end-line 759, :end-column 44, :form [{:position "absolute", :top "-16px", :right "-16px"} ["& .wrapper" {:display "flex", :flex-direction "row", :justify-content "flex-end", :align-items "center"}]]} {:line 770, :column 15, :end-line 791, :end-column 69, :form [{:min-width "180px", :transition "box-shadow .2s ease-in-out", :background-color "#eaeaea", :max-width "300px", :padding "10px 10px 5px 10px", :display "flex", :position "relative", :border-radius "5px", :flex-direction "column"} ["& .card-actions" {:opacity "0", :transition "opacity .4s ease-in-out"}] ["&:hover .card-actions" {:opacity "1"}] ["& .avatar" {:position "absolute", :left "-10px", :top "-10px", :transition "all .1s ease-in-out", :background "var(--avatar-bg)"}] ["&:hover" {:box-shadow "1px 4px 11px 1px #ababab"}]]} {:line 835, :column 3, :end-line 841, :end-column 31, :form [:h-5 :w-5 :text-neutral-600 :cursor-pointer {:opacity "0.5", :transition "opacity .3s ease-in-out"} ["&:hover" {:opacity "1"}]]} {:line 853, :column 3, :end-line 858, :end-column 39, :form [:flex :justify-between :relative :pb-2 ["& .tabs" :flex :flex-wrap :px-2]]} {:line 861, :column 3, :end-line 881, :end-column 46, :form [:uppercase :z-10 :h-6 :px-3 :py-2 :flex :items-center :justify-center :select-none :cursor-pointer :text-normal :text-xxs :rounded-md :font-semibold {:min-width "5em"} ["&:hover" {:text-decoration "none", :color "var(--color-p2)"}] ["&.selected" {:color "var(--color-p2)"}]]} {:line 913, :column 17, :end-line 919, :end-column 56, :form [:z-0 :absolute :rounded-md {:transition "width .2s ease-in-out, height .2s ease-in-out, left .2s ease-in-out", :background-color "var(--background-p1)", :border "1px solid var(--color-m2)"}]} {:line 948, :column 3, :end-line 969, :end-column 70, :form [:uppercase :h-6 :flex :items-center :justify-center :select-none :cursor-pointer :text-normal :border-b :border-l :border-r :border-normal :font-semibold :text-xxs {:min-width "5em", :padding-right "10px"} ["& .icon" :h-3 :w-3 {:margin-left "6px"}] ["& .name" {:margin-left "6px"}] ["&:first-child" :mr-4] ["&[disabled]" :pointer-events-none :color-] ["&:hover" :bg-normal-focused :color++ {:text-decoration "none"}]]} {:line 999, :column 3, :end-line 1019, :end-column 39, :form [["& .option" :flex :items-center :text-normal :text-xxs :select-none {:border "1px solid var(--border-normal)", :min-height "1.5rem", :border-radius "1px", :padding-left "3px", :padding-right "8px"}] ["& .option.PERSON, & .option.ACCESS" {:border-radius "16px"}] ["& .option .avatar" :overflow-hidden {:width "18px", :height "18px", :border-radius "1px", :margin-right "6px", :background "var(--avatar-bg)"}] ["& .option.selected" {:border-color "var(--border-highlighted)"}] ["& .option.PERSON .avatar, & .option.ACCESS .avatar" {:border-radius "50px", :background "var(--avatar-bg)"}]]} {:line 1043, :column 21, :end-line 1044, :end-column 52, :form [["& .option" :cursor-pointer]]} {:line 1047, :column 19, :end-line 1060, :end-column 47, :form [:text-normal :relative ["& .actions" :absolute :flex :flex-end :z-10 {:top "0px", :right "1rem"}] ["& .actions .action" :box-action :p-1 :cursor-pointer] ["& .actions .action:hover" :box-action-hover] ["& .actions .action.selected" :box-action-selected] ["& .actions .action svg" :h-4 :w-4] ["& .options" :pt-1 :flex]]} {:line 1073, :column 19, :end-line 1079, :end-column 59, :form [:overflow-hidden :p-6 :z-20 :text-normal :text-sm {:transition "height .2s ease-in-out"}]} {:line 1089, :column 19, :end-line 1092, :end-column 53, :form [:py-8 :px-8 :flex :flex-wrap {:gap "0.5rem"}]}], :ns toddler.ui.elements, :ns-meta {}, :require-aliases {set clojure.set, async clojure.core.async, react "react", popup toddler.popup, layout toddler.layout, toddler toddler.core, hooks helix.hooks, util toddler.util, dropdown toddler.dropdown, c helix.children, ui toddler.ui, scroll toddler.scroll, str clojure.string, multiselect toddler.multiselect, ionic toddler.ionic, outlined toddler.material.outlined, d helix.dom}, :requires ["react" clojure.set clojure.core.async clojure.string shadow.css toddler.ui toddler.util helix.core helix.hooks helix.dom helix.children toddler.avatar toddler.input toddler.material.outlined toddler.core toddler.dropdown toddler.multiselect toddler.scroll toddler.ionic toddler.popup toddler.layout toddler.ui.elements.calendar], :refer {! {:require toddler.ui, :sym !}, provider {:require helix.core, :sym provider}, create-context {:require helix.core, :sym create-context}, defnc {:require helix.core, :sym defnc}, css {:require shadow.css, :sym css}, period-calendar {:require toddler.ui.elements.calendar, :sym period-calendar}, $ {:require helix.core, :sym $}, AutosizeInput {:require toddler.input, :sym AutosizeInput}, IdleInput {:require toddler.input, :sym IdleInput}, calendar {:require toddler.ui.elements.calendar, :sym calendar}, <> {:require helix.core, :sym <>}, use-delayed {:require toddler.core, :sym use-delayed}, avatar {:require toddler.avatar, :sym avatar}}}, toddler.ui.elements.modal {:css [{:line 19, :column 3, :end-line 32, :end-column 42, :form [:w-full :h-full {:top "0", :left "0", :position "fixed", :z-index "1000", :backdrop-filter "var(--modal-layer-bg-filter)", :background "var(--modal-layer-bg)"} ["&:hover:not(.block)" :cursor-pointer] ["& .close" :absolute :h-8 :w-8 :m-1 {:top "0", :right "0", :color "var(--modal-close)"}] ["&:hover:not(.block) .close" {:color "var(--modal-close-hover)"}]]} {:line 55, :column 3, :end-line 72, :end-column 60, :form [:flex :flex-col :rounded-lg :relative :border :border-normal :color :text-xs {:background "var(--modal-bg)"} ["& > .content" :px-8] ["& > .title" :px-8 :pt-6 :color+ :text-sm :font-semibold :pb-2] ["&.positive" :modal-positive :border-positive] ["&.negative" :modal-negative :border-negative] ["&.warn" :modal-warn :border-warning] ["& > .buttons, & > .footer" :pt-4 :px-8 :flex :justify-end :pb-4 {:gap "0.5rem"}] ["& > .buttons button, & > .footer button" :mx-0 :my-0]]} {:line 80, :column 16, :end-line 80, :end-column 43, :form [:flex :justify-center]} {:line 86, :column 19, :end-line 91, :end-column 59, :form [:flex :z-20 :justify-center :items-center {:animation "fade-in .4s ease-in-out"}]} {:line 106, :column 16, :end-line 110, :end-column 38, :form [:w-6 :h-6 :absolute :select-none :pointer-events-none {:color "var(--color-p2)", :top "-24px", :right "-24px"}]} {:line 114, :column 3, :end-line 120, :end-column 29, :form [:flex :color :bg-normal :border :border-normal {:align-self "flex-end"}]} {:line 133, :column 16, :end-line 133, :end-column 43, :form [:flex :justify-center]} {:line 157, :column 3, :end-line 170, :end-column 70, :form [:relative :flex :grow :p-3 :flex-col :box-content {:align-self "stretch"} ["& .close" :color- {:width "2em", :height "2em", :transition "all .3s ease-in-out"}] ["& .close:hover" :text] ["& .title" :color+ :font-bold :flex :items-end {:opacity "0.8"}]]} {:line 185, :column 21, :end-line 192, :end-column 42, :form [:flex :justify-between :pt-4 {:box-sizing "border-box", :flex-grow "1", :max-height "10%"}]} {:line 201, :column 22, :end-line 204, :end-column 34, :form [:flex :justify-center :items-end]} {:line 209, :column 21, :end-line 214, :end-column 42, :form [:flex :h-7 :justify-end {:flex-grow "1", :max-height "10%"}]} {:line 216, :column 22, :end-line 219, :end-column 37, :form [:flex :justify-center :items-center]} {:line 224, :column 24, :end-line 224, :end-column 63, :form [:flex :flex-col {:flex-grow "10"}]}], :ns toddler.ui.elements.modal, :ns-meta {}, :require-aliases {rdom "react-dom", popup toddler.popup, layout toddler.layout, toddler toddler.core, hooks helix.hooks, c helix.children, ionic toddler.ionic, outlined toddler.material.outlined, d helix.dom}, :requires ["react-dom" shadow.css helix.core helix.hooks helix.dom helix.children toddler.material.outlined toddler.core toddler.ionic toddler.popup toddler.layout], :refer {css {:require shadow.css, :sym css}, $ {:require helix.core, :sym $}, defnc {:require helix.core, :sym defnc}, provider {:require helix.core, :sym provider}, create-context {:require helix.core, :sym create-context}}}, toddler.ui.fields {:css [{:line 33, :column 3, :end-line 45, :end-column 54, :form [:flex {:flex "100 0 auto", :width "100px"} ["& > .content" :w-full] ["& .avatar" :border :border-normal- {:background-color "var(--avatar-bg)", :border-radius "20px"}] ["&.error" :color-negative] ["&.error .toddler-field-label" :color-negative] ["&.error .toddler-input-field" :border-negative]]} {:line 48, :column 3, :end-line 54, :end-column 40, :form [:flex :items-center :rounded-md :cursor-text :grow {:transition "all .3s ease-in-out"}]} {:line 57, :column 3, :end-line 61, :end-column 41, :form [["& .clear" :text-transparent :cursor-pointer {:transition "color .3s ease-in-out"}] ["&:hover .clear" :text-neutral-400] ["& .clear:hover" :text-neutral-600]]} {:line 64, :column 3, :end-line 72, :end-column 24, :form [:select-none :uppercase :font-semibold :text-normal :block :h-5 :pl-1 {:color "var(--field-label)", :font-size "10px"}]} {:line 75, :column 3, :end-line 112, :end-column 123, :form [:flex :grow :items-center :relative :bg-normal :border :border-normal :text-normal :text-sm {:transition "background-color .4s ease-in-out", :min-height "40px", :background-color "var(--field-bg)", :color "var(--field-text)", :border-color "var(--field-border)"} ["& .icon" :w-6 :h-6 :ml-2 :user-no-select] ["& .icon.right" :flex :items-center :justify-center :cursor-pointer :mr-1] ["&:focus-within" :animate-border-click {:background-color "var(--field-bg-active)", :border-color "var(--field-border-active)"}] ["&:focus-within .decorator" :text-click] ["&:hover:not(.disabled):not(:focus-within)" {:background-color "var(--field-bg-hover)", :border-color "var(--field-border-hover)"}] :rounded-md ["& .avatar" :ml-2 :bg-avatar] ["& .avatar img" :rounded-sm] ["& .decorator" {:width "24px", :height "24px", :margin-right "0.25rem", :transition "color .3s ease-in-out, transform .3s ease-in-out"}] ["&:focus-within .decorator" {:transform "rotate(180deg)"}] ["& textarea" {:resize "none"}] ["& input, & textarea" :grow :px-3] ["& input[type=\"password\"]" {:font-family "Verdana", :letter-spacing "0.125em"}] ["& input:focus, & textarea:focus" {:color "var(--field-text-active)"}] ["& input::placeholder, & textarea::placeholder" :text-normal :font-medium {:user-select "none", :font-style "normal"}]]} {:line 390, :column 22, :end-line 390, :end-column 50, :form [:shadow-md :rounded-lg]} {:line 429, :column 26, :end-line 429, :end-column 43, :form [:flex :grow]} {:line 438, :column 3, :end-line 445, :end-column 37, :form [:flex :flex-row :grow :flex-wrap :user-no-select {:gap "0.375rem 0.375rem", :padding "1rem 1rem 1rem 1rem"}]} {:line 448, :column 3, :end-line 484, :end-column 29, :form [:flex :grow :items-center :relative :border :text-sm :pl-3 :pr-8 :flex-wrap :py-2 {:transition "background-color .4s ease-in-out", :min-height "40px", :gap "0.375rem 0.375rem", :background-color "var(--field-bg)", :color "var(--field-text)", :border-color "var(--field-border)"} ["&:focus-within" :animate-border-click {:background-color "var(--field-bg-active)", :border-color "var(--field-border-active)"}] ["& .decorator" :top-2 :right-2 :absolute {:width "24px", :height "24px", :transition "color .3s ease-in-out, transform .3s ease-in-out"}] ["&:focus-within .decorator" :text-click {:transform "rotate(180deg)"}] ["&:hover:not(.disabled):not(:focus-within)" {:background-color "var(--field-bg-hover)", :border-color "var(--field-border-hover)"}] :rounded-md ["& .avatar" :mr-2 {:background-color "var(--avatar-bg)"}] ["& .avatar img" :rounded-sm] ["& input" {:flex "1 1 auto", :min-height "26px"}] ["& input::placeholder" {:user-select "none", :font-style "normal"}]]} {:line 497, :column 16, :end-line 498, :end-column 37, :form [["& .remove" :ml-3]]} {:line 622, :column 3, :end-line 658, :end-column 26, :form [:flex :flex-col ["& .row" :flex :text-sm {:gap "0.25rem", :color "var(--field-text)"}] ["& .row .date, & .row .time" :border {:background-color "var(--field-bg)", :border-color "var(--field-border)"}] ["& .row .date" {:width "13.5rem"}] ["& .row .date.no-time" {:width "18.75rem"}] ["& .row .time" {:width "5rem"}] ["& .row .date, & .row .time" :flex :items-center :relative :transition :grow :h-10 :rounded-md :cursor-pointer {:transition "background-color .4s ease-in-out, border-color .4s ease-in-out", :min-height "40px", :color "var(--field-text)", :border-color "var(--field-border)"}] ["& .row .date:focus-within, & .row .time:focus-within" {:background-color "var(--field-bg-active)", :border-color "var(--field-border-active)", :animation-name "var(--input-normal-click)", :animation-duration ".5s"}] ["& .row .date svg, & .row .time svg" :absolute :h-4 :w-4 :right-2] ["& .row .date:hover:not(:focus-within), & .row .time:hover:not(:focus-within)" {:border-color "var(--field-border-hover)"}] ["& .row .date:hover:not(:focus-within) svg, & .row .time:hover:not(:focus-within) svg" :text-hover] ["& .row input" {:max-width "6rem"} :cursor-pointer :ml-3] ["& .calendar" :mt-1]]} {:line 738, :column 3, :end-line 773, :end-column 26, :form [:flex :flex-col ["& .inputs" :text-sm {:color "var(--field-text)"}] ["& .inputs .from-row, & .inputs .to-row" :flex {:gap "0.25rem"}] ["& .inputs .date, & .inputs .time" :border {:background-color "var(--field-bg)", :border-color "var(--field-border)"}] ["& .inputs .to-row" :mt-1] ["& .inputs.no-time" {:max-width "100px"}] ["& .inputs .date, & .inputs .time" :flex :items-center :rounded-md :relative :transition :grow :h-10 :cursor-pointer {:transition "background-color .4s ease-in-out, border-color .4s ease-in-out", :min-height "40px", :color "var(--field-text)", :border-color "var(--field-border)"}] ["& .inputs .date:focus-within, & .inputs .time:focus-within, &.opened .inputs .date" {:background-color "var(--field-bg-active)", :border-color "var(--field-border-active)", :animation-name "var(--input-normal-click)", :animation-duration ".5s"}] ["& .inputs .date svg, & .inputs .time svg" :absolute :h-4 :w-4 :right-2] ["&:not(.opened) .inputs .date:hover:not(:focus-within), &:not(.opened) .inputs .time:hover:not(:focus-within)" {:border-color "var(--field-border-hover)"}] ["& .inputs .date:hover:not(:focus-within) svg, & .inputs .time:hover:not(:focus-within) svg" :color-hover] ["& .inputs input" :cursor-pointer :ml-3] ["& .inputs.no-time input" {:max-width "134px"}] ["& .inputs .date" {:width "13.5rem"}] ["& .inputs .time" {:width "5rem"}] ["& .calendar" :mt-1]]} {:line 890, :column 21, :end-line 891, :end-column 59, :form [:flex :gap-1 ["& input" {:max-width "120px"}]]} {:line 936, :column 3, :end-line 956, :end-column 36, :form [:cursor-pointer :flex :grow :items-center :relative :border :text-sm :justify-between {:transition "background-color .4s ease-in-out", :min-height "40px", :background-color "var(--field-bg)", :color "var(--field-label)", :border-color "var(--field-border)"} ["&:hover" {:color "var(--color-neutral-p2)"}] ["& .verbal" :cursor-pointer :grow :text-field-normal :select-none :px-2 {:min-width "5rem"}] ["& .figurative" :pr-2] ["& .figurative svg" :w-5 :h-5]]} {:line 966, :column 15, :end-line 976, :end-column 31, :form [:cursor-pointer :pl-2 {:color "var(--field-label)"} ["&:hover, &.selected" {:color "var(--field-text)"}] ["& .toddler-checkbox-wrapper" :flex :items-center] ["& .toddler-checkbox-wrapper:hover" :text-hover] ["& .toddler-checkbox-wrapper > .figurative > svg" :h-5 :w-5] ["& .toddler-checkbox-wrapper > .verbal" :text-xxs :font-semibold :uppercase :ml-1 :select-none]]} {:line 1055, :column 26, :end-line 1055, :end-column 43, :form [:flex :grow]}], :ns toddler.ui.fields, :ns-meta {}, :require-aliases {input toddler.input, popup toddler.popup, toddler toddler.core, hooks helix.hooks, vura vura.core, dropdown toddler.dropdown, e toddler.ui.elements, c helix.children, ui toddler.ui, str clojure.string, gstr goog.string, outlined toddler.material.outlined, d helix.dom}, :requires [clojure.set clojure.string vura.core goog.string shadow.css goog.string.format helix.core helix.dom helix.children helix.hooks toddler.input toddler.mask toddler.core toddler.ui.elements toddler.material.outlined toddler.dropdown toddler.multiselect toddler.ui toddler.popup], :refer {! {:require toddler.ui, :sym !}, provider {:require helix.core, :sym provider}, defnc {:require helix.core, :sym defnc}, use-dropdown {:require toddler.dropdown, :sym use-dropdown}, css {:require shadow.css, :sym css}, $ {:require helix.core, :sym $}, use-translate {:require toddler.core, :sym use-translate}, use-mask {:require toddler.mask, :sym use-mask}, IdleInput {:require toddler.input, :sym IdleInput}, <> {:require helix.core, :sym <>}, use-multiselect {:require toddler.multiselect, :sym use-multiselect}, TextAreaElement {:require toddler.input, :sym TextAreaElement}}}, toddler.avatar {:css [], :ns toddler.avatar, :ns-meta {}, :require-aliases {d helix.dom}, :requires [helix.core helix.dom], :refer {defnc {:require helix.core, :sym defnc}}}, toddler.graphql.transport {:css [], :ns toddler.graphql.transport, :ns-meta {}, :require-aliases {async clojure.core.async, transit cognitect.transit}, :requires [cljs-bean.core clojure.core.async cognitect.transit], :refer {->js {:require cljs-bean.core, :sym ->js}, ->clj {:require cljs-bean.core, :sym ->clj}}}, toddler.multiselect {:css [], :ns toddler.multiselect, :ns-meta {}, :require-aliases {hooks helix.hooks, d helix.dom, c helix.children, popup toddler.popup, ui toddler.ui}, :requires [helix.core helix.hooks helix.dom helix.children clojure.string toddler.dropdown toddler.popup toddler.ui], :refer {$ {:require helix.core, :sym $}, defhook {:require helix.core, :sym defhook}, defnc {:require helix.core, :sym defnc}, provider {:require helix.core, :sym provider}, <> {:require helix.core, :sym <>}, *dropdown* {:require toddler.dropdown, :sym *dropdown*}, ! {:require toddler.ui, :sym !}}}, toddler.layout {:css [], :ns toddler.layout, :ns-meta {}, :require-aliases {async clojure.core.async, toddler toddler.core, hooks helix.hooks, util toddler.util, vura vura.core, c helix.children, ui toddler.ui, app toddler.app, d helix.dom}, :requires [clojure.core.async helix.core helix.hooks helix.dom helix.children vura.core toddler.core toddler.util toddler.ui toddler.app], :refer {provider {:require helix.core, :sym provider}, create-context {:require helix.core, :sym create-context}, use-dimensions {:require toddler.core, :sym use-dimensions}, memo {:require helix.core, :sym memo}, defnc {:require helix.core, :sym defnc}, fnc {:require helix.core, :sym fnc}, $ {:require helix.core, :sym $}, defhook {:require helix.core, :sym defhook}, <> {:require helix.core, :sym <>}}}, toddler.dev {:css [{:line 74, :column 20, :end-line 85, :end-column 77, :form [:mx-3 :my-2 ["& a" :no-underline :select-none] ["& .name" :text-sm :font-semibold {:color "var(--color-inactive)"}] ["& .icon" :w-5 :text-transparent :mr-1] ["& .level-1" :pl-2] ["& .level-2" :pl-4] ["& .level-3" :pl-6] ["& .name" :text-xs {:color "var(--color-inactive)"}] ["& .name:hover" :text-xs {:color "var(--color-active)"}] ["& .selected.name" {:color "var(--color-normal)"}] ["& .name.selected" {:color "var(--color-normal)"}]]} {:line 113, :column 17, :end-line 129, :end-column 27, :form [:flex :flex-col :toddler/menu-link-selected ["& .title" :flex :h-20 :items-center :text-2xl :mb-4 :justify-center :select-none {:font-family "Caveat Brush, serif", :font-size "3rem"}] ["& .component-list" :ml-3 :mb-20]]} {:line 187, :column 29, :end-line 187, :end-column 65, :form [:flex :items-center :font-bold]} {:line 190, :column 21, :end-line 193, :end-column 62, :form [:toddler/menu-link :items-center ["&:hover" :toddler/menu-link-selected]]} {:line 194, :column 34, :end-line 194, :end-column 67, :form [:toddler/menu-link-selected]} {:line 207, :column 16, :end-line 217, :end-column 63, :form [:flex :h-15 :flex-row-reverse :pr-3 :box-border ["& .wrapper" :items-center :flex :items-center {:font-size "24px"} :mr-4 :cursor-pointer :color-inactive] ["& .wrapper:first-child" :mr-0] ["& .tooltip-popup-area:hover" :color-normal]]} {:line 244, :column 21, :end-line 244, :end-column 62, :form [:text-base :font-bold :no-underline]} {:line 250, :column 16, :end-line 252, :end-column 35, :form [:flex :justify-center :items-center]} {:line 264, :column 18, :end-line 266, :end-column 31, :form [:background-normal :rounded-md]}], :ns toddler.dev, :ns-meta {}, :require-aliases {i18n toddler.i18n, brands toddler.fav6.brands, async clojure.core.async, react "react", popup toddler.popup, router toddler.router, layout toddler.layout, toddler toddler.core, hooks helix.hooks, dropdown toddler.dropdown, window toddler.window, e toddler.ui.elements, ui toddler.ui, app toddler.app, outlined toddler.material.outlined, d helix.dom}, :requires [clojure.core.async helix.core helix.hooks helix.dom helix.children toddler.router toddler.core toddler.i18n.default toddler.app toddler.ui toddler.ui.elements toddler.layout toddler.window toddler.popup toddler.dropdown toddler.material.outlined toddler.fav6.brands "react" toddler.i18n shadow.css], :refer {! {:require toddler.ui, :sym !}, provider {:require helix.core, :sym provider}, create-context {:require helix.core, :sym create-context}, use-dimensions {:require toddler.core, :sym use-dimensions}, children {:require helix.children, :sym children}, defnc {:require helix.core, :sym defnc}, css {:require shadow.css, :sym css}, use-user {:require toddler.core, :sym use-user}, $ {:require helix.core, :sym $}, <> {:require helix.core, :sym <>}, use-window-dimensions {:require toddler.core, :sym use-window-dimensions}}}, toddler.router {:css [], :ns toddler.router, :ns-meta {}, :require-aliases {set clojure.set, edn clojure.edn, str clojure.string, t taoensso.telemere, hooks helix.hooks, zip clojure.zip}, :requires [clojure.set goog.string goog.object clojure.edn clojure.pprint clojure.string taoensso.telemere cljs.reader helix.core helix.hooks helix.children clojure.zip toddler.core], :refer {pprint {:require clojure.pprint, :sym pprint}, provider {:require helix.core, :sym provider}, create-context {:require helix.core, :sym create-context}, children {:require helix.children, :sym children}, format {:require goog.string, :sym format}, defnc {:require helix.core, :sym defnc}, fnc {:require helix.core, :sym fnc}, $ {:require helix.core, :sym $}, use-translate {:require toddler.core, :sym use-translate}, defhook {:require helix.core, :sym defhook}, read-string {:require cljs.reader, :sym read-string}, use-delayed {:require toddler.core, :sym use-delayed}}}, toddler.input {:css [], :ns toddler.input, :ns-meta {}, :require-aliases {react "react", async cljs.core.async, hooks helix.hooks, d helix.dom, util toddler.util}, :requires [goog.object clojure.string clojure.edn "react" cljs.core.async helix.core helix.hooks helix.dom toddler.util], :refer {defnc {:require helix.core, :sym defnc}, <> {:require helix.core, :sym <>}}}, toddler.ui.components {:css [], :ns toddler.ui.components, :ns-meta {}, :require-aliases {fields toddler.ui.fields, elements toddler.ui.elements, tables toddler.ui.tables, modal toddler.ui.elements.modal, calendar toddler.ui.elements.calendar}, :requires [helix.core toddler.ui toddler.ui.fields toddler.ui.elements toddler.ui.tables toddler.ui.elements.modal toddler.ui.elements.calendar], :refer {$ {:require helix.core, :sym $}, defnc {:require helix.core, :sym defnc}, UI {:require toddler.ui, :sym UI}}}, toddler.md.context {:css [], :ns toddler.md.context, :ns-meta {}, :require-aliases {}, :requires [helix.core], :refer {create-context {:require helix.core, :sym create-context}}}, toddler.app {:css [], :ns toddler.app, :ns-meta {}, :require-aliases {async clojure.core.async, hooks helix.hooks}, :requires [clojure.core.async helix.core helix.hooks], :refer {create-context {:require helix.core, :sym create-context}, defhook {:require helix.core, :sym defhook}}}, toddler.md {:css [], :ns toddler.md, :ns-meta {}, :require-aliases {hljs "highlight.js", async clojure.core.async, router toddler.router, hooks helix.hooks, util toddler.util, markdownit "markdown-it", md.context toddler.md.context, head toddler.head, str clojure.string, app toddler.app, d helix.dom}, :requires [toddler.app clojure.string clojure.core.async helix.core helix.dom helix.hooks toddler.core toddler.showcase.css toddler.util toddler.router toddler.head toddler.md.context "markdown-it" "markdown-it-emoji" "highlight.js"], :refer {defnc {:require helix.core, :sym defnc}, $ {:require helix.core, :sym $}, <> {:require helix.core, :sym <>}, memo {:require helix.core, :sym memo}, fetch {:require toddler.core, :sym fetch}, $default {:require toddler.showcase.css, :sym $default}, full {:require "markdown-it-emoji", :sym full}, emoji {:require "markdown-it-emoji", :sym full}}}, toddler.notifications {:css [{:line 306, :column 3, :end-line 361, :end-column 72, :form [{:color "var(--notification-text)"} ["& .notification-wrapper" :py-1] ["& .notification" :flex :rounded-md :grow :py-3 :px-4 :relative :border :border-normal :bg-normal+ :shadow-lg :items-center {:z-index "200", :transition "color .3s ease-in-out"}] ["& .notification .icon" :flex :items-center {:order 2}] ["& .notification pre" :word-break :whitespace-pre-wrap] ["& .notification .content" :flex :items-center :mr-2 :grow {:order 2} :text-xxs :font-medium] ["& .notification .close" :absolute :top-3 :right-3 :flex :items-center :ml-3 :pl-3 {:order 3, :opacity "0.5", :justify-self "flex-end", :transition "color .3s ease-in-out"} :text-sm] ["& .notification" {:background-color "var(--notification-neutral)"}] ["& .notification .close svg" :w-4 :h-4] ["& .notification .close:hover" :cursor-pointer {:opacity "1"}] ["& .notification.negative" {:background-color "var(--notification-negative)", :border-color "var(--border-negative)"}] ["& .notification.positive" {:background-color "var(--notification-positive)", :border-color "var(--border-positive)"}] ["& .notification.warning" {:background-color "var(--notification-warn)", :border-color "var(--border-warning)"}]]}], :ns toddler.notifications, :ns-meta {}, :require-aliases {async clojure.core.async, hooks helix.hooks, d helix.dom, outlined toddler.material.outlined}, :requires [clojure.string goog.string.format shadow.css clojure.core.async helix.core helix.children helix.hooks helix.dom toddler.material.outlined], :refer {css {:require shadow.css, :sym css}, defnc {:require helix.core, :sym defnc}, $ {:require helix.core, :sym $}, <> {:require helix.core, :sym <>}, memo {:require helix.core, :sym memo}, create-context {:require helix.core, :sym create-context}, provider {:require helix.core, :sym provider}, children {:require helix.children, :sym children}}}, toddler.i18n.default {:css [], :ns toddler.i18n.default, :ns-meta {}, :require-aliases {}, :requires [toddler.i18n.number toddler.i18n.time toddler.i18n.keyword], :refer {add-translations {:require toddler.i18n.keyword, :sym add-translations}}}, toddler.popup {:css [], :ns toddler.popup, :ns-meta {}, :require-aliases {async clojure.core.async, t taoensso.telemere, react "react", rdom "react-dom", hooks helix.hooks, d helix.dom, c helix.children, util toddler.util}, :requires [clojure.string clojure.core.async taoensso.telemere "react" "react-dom" helix.core helix.hooks helix.dom helix.children toddler.ui toddler.layout toddler.util], :refer {defnc {:require helix.core, :sym defnc}, provider {:require helix.core, :sym provider}, <> {:require helix.core, :sym <>}, defhook {:require helix.core, :sym defhook}, create-context {:require helix.core, :sym create-context}, forward-ref {:require toddler.ui, :sym forward-ref}, *container-dimensions* {:require toddler.layout, :sym *container-dimensions*}}}, toddler.ui.elements.calendar {:css [{:line 13, :column 3, :end-line 27, :end-column 32, :form [:flex :flex-row :cursor-default {:cursor "default"} ["& .day-wrapper" :h-6 :w-10 :flex :justify-center :items-center {:border-collapse "collapse", :border "1px solid transparent"}] ["& .day-wrapper .day" :text-normal :uppercase :select-none :font-medium {:font-size "0.625rem", :line-height "1.125rem"}]]} {:line 30, :column 3, :end-line 33, :end-column 18, :form [:flex :flex-col :items-center]} {:line 36, :column 3, :end-line 36, :end-column 36, :form [:flex :flex-row :mt-2 :px-2]} {:line 39, :column 3, :end-line 102, :end-column 42, :form [:color-inactive ["& .day" :w-10 :h-6 :flex :items-center :justify-center :text-normal :cursor-pointer :select-none :font-medium {:font-size "0.75rem", :font-weight "500", :line-height "1.25rem"}] ["& .day.empty" {:cursor "default"}] ["& .day.disabled, & .day:hover.disabled" :border :border-solid :border-transparent :color-inactive :cursor-default] ["&:hover:not(.empty):not(.period-start):not(.period-end):not(.picked) .day" {:border-color "#var(--cd-hover-border) !important", :color "var(--cd-hover-color)"}] ["&.selected .day" {:border-top "1px solid var(--cd-selected-border)", :border-bottom "1px solid var(--cd-selected-border)", :color "var(--cd-selected-color) !important"}] ["&.picked .day" {:border-right "1px solid var(--cd-selected-border)", :color "var(--cd-selected-color)", :border-top-right-radius "3px", :border-bottom-left-radius "3px", :border-left "1px solid var(--cd-selected-border)", :border-top-left-radius "3px", :border-top "1px solid var(--cd-selected-border)", :border-bottom-right-radius "3px", :border-bottom "1px solid var(--cd-selected-border)"}] ["&.prev-month:not(.period-start):not(.period-end):not(.picked) .day, &.next-month .day:not(.period-end):not(.picked)" {:color "var(--cd-other-color)"}] ["&.selected:first-child .day, &.period-start .day" {:border-left "1px solid var(--cd-selected-border) ", :border-top-left-radius "3px", :border-bottom-left-radius "3px"}] ["&.period-start .day" {:border-right "1px solid var(--cd-selected-border)", :background-color "var(--cd-period-marker-bg)", :border-top-left-radius "3px", :border-bottom-left-radius "3px", :color "var(--cd-period-marker-color)"}] ["&.selected:last-child .day, &.period-end .day" {:border-right "1px solid var(--cd-selected-border) ", :border-top-right-radius "3px", :border-bottom-right-radius "3px"}] ["&.period-end .day" {:border-left "1px solid var(--cd-selected-border)", :background-color "var(--cd-period-marker-bg) ", :color "var(--cd-period-marker-color)", :border-top-right-radius "3px", :border-bottom-right-radius "3px"}]]} {:line 105, :column 3, :end-line 154, :end-column 23, :form [{:display "flex", :flex-direction "column", :background-color "transparent"} :rounded-sm :py-2 ["& .header-wrapper" :flex :flex-grow] ["& .header" :flex :grow :h-6 :mb-2 :px-2 :justify-between :text-normal] ["& .header" :select-none] ["& .header svg" :border :border-transparent {:transition "border-color .3s ease-in-out, background-color .3s ease-in-out, color .3s ease-in-out", :color "var(--calendar-button-color)"}] ["& .header svg:hover" :rounded-sm {:background-color "var(--calendar-button-bg-hover)", :color "var(--calendar-button-color-hover)"}] ["& .header .back, & .header .forward" :flex] ["& .header .info" :flex :justify-center :items-center :px-2] ["& .header .info .month" :uppercase {:font-weight "600", :font-size "0.75rem", :line-height "1.25rem"}] ["& .header .info .year" :ml-2 {:font-weight "600", :font-size "0.75rem", :line-height "1.25rem"}] ["& .header svg" :w-6 :h-6 :cursor-pointer] ["& .header svg:hover" :text-hover] ["& .header .info" :grow] ["& .header .months" :select-none :flex :relative :items-center] ["& .content-wrapper" {:display "flex", :justify-content "center", :flex-grow "1"}]]}], :ns toddler.ui.elements.calendar, :ns-meta {}, :require-aliases {vura vura.core, hooks helix.hooks, d helix.dom, outlined toddler.material.outlined, date toddler.date}, :requires [vura.core shadow.css helix.core helix.hooks helix.dom toddler.material.outlined toddler.date], :refer {css {:require shadow.css, :sym css}, $ {:require helix.core, :sym $}, defnc {:require helix.core, :sym defnc}}}, toddler.i18n {:css [], :ns toddler.i18n, :ns-meta {}, :require-aliases {}, :requires []}, toddler.util {:css [], :ns toddler.util, :ns-meta {}, :require-aliases {async clojure.core.async}, :requires [goog.object clojure.string clojure.core.async]}, toddler.window {:css [], :ns toddler.window, :ns-meta {}, :require-aliases {async clojure.core.async, app toddler.app, hooks helix.hooks, c helix.children}, :requires [clojure.core.async vura.core toddler.app toddler.core helix.core helix.hooks helix.children], :refer {round-number {:require vura.core, :sym round-number}, make-idle-service {:require toddler.core, :sym make-idle-service}, defnc {:require helix.core, :sym defnc}, provider {:require helix.core, :sym provider}, fnc {:require helix.core, :sym fnc}, $ {:require helix.core, :sym $}}}, toddler.date {:css [], :ns toddler.date, :ns-meta {}, :require-aliases {vura vura.core, hooks helix.hooks, toddler toddler.core}, :requires [goog.string.format vura.core helix.core helix.hooks toddler.core], :refer {defhook {:require helix.core, :sym defhook}}}, toddler.head {:css [], :ns toddler.head, :ns-meta {}, :require-aliases {}, :requires [goog.object clojure.data], :refer {diff {:require clojure.data, :sym diff}}}, toddler.ui {:css [], :ns toddler.ui, :ns-meta {}, :require-aliases {react "react", c helix.children, hooks helix.hooks}, :requires ["react" helix.core helix.children helix.hooks], :refer {create-context {:require helix.core, :sym create-context}, provider {:require helix.core, :sym provider}, defnc {:require helix.core, :sym defnc}, $ {:require helix.core, :sym $}, fnc {:require helix.core, :sym fnc}, defhook {:require helix.core, :sym defhook}}}, toddler.i18n.keyword {:css [], :ns toddler.i18n.keyword, :ns-meta {}, :require-aliases {i18n toddler.i18n, t toddler.i18n.time}, :requires [toddler.i18n toddler.i18n.time toddler.util], :refer {deep-merge {:require toddler.util, :sym deep-merge}}}, toddler.core {:css [], :ns toddler.core, :ns-meta {}, :require-aliases {i18n toddler.i18n, async clojure.core.async, rdom "react-dom", hooks helix.hooks, util toddler.util, str clojure.string, app toddler.app, gstr goog.string, edn clojure.edn, graphql toddler.graphql}, :requires ["react-dom" shadow.loader clojure.set clojure.edn clojure.pprint clojure.string goog.string goog.string.format clojure.core.async helix.core helix.hooks helix.children toddler.app toddler.util toddler.i18n toddler.i18n.keyword toddler.i18n.time toddler.i18n.number toddler.graphql toddler.graphql.transport], :refer {pprint {:require clojure.pprint, :sym pprint}, children {:require helix.children, :sym children}, translate {:require toddler.i18n, :sym translate}, send-query {:require toddler.graphql.transport, :sym send-query}}}, toddler.mask {:css [], :ns toddler.mask, :ns-meta {}, :require-aliases {d helix.dom, hooks helix.hooks}, :requires [clojure.string helix.dom helix.core helix.hooks], :refer {defnc {:require helix.core, :sym defnc}, defhook {:require helix.core, :sym defhook}}}, toddler.scroll {:css [], :ns toddler.scroll, :ns-meta {}, :require-aliases {simplebar "simplebar-react", csk camel-snake-kebab.core}, :requires ["simplebar-react" cljs-bean.core helix.core toddler.ui camel-snake-kebab.core camel-snake-kebab.extras], :refer {->js {:require cljs-bean.core, :sym ->js}, defnc {:require helix.core, :sym defnc}, $ {:require helix.core, :sym $}, forward-ref {:require toddler.ui, :sym forward-ref}, transform-keys {:require camel-snake-kebab.extras, :sym transform-keys}}}, toddler.i18n.time {:css [], :ns toddler.i18n.time, :ns-meta {}, :require-aliases {i18n toddler.i18n}, :requires [goog.object clojure.set toddler.i18n goog.i18n.DateTimeFormat goog.i18n.DateTimeSymbols]}, toddler.i18n.common {:css [], :ns toddler.i18n.common, :ns-meta {}, :require-aliases {}, :requires [toddler.i18n.keyword], :refer {add-translations {:require toddler.i18n.keyword, :sym add-translations}}}, toddler.grid {:css [], :ns toddler.grid, :ns-meta {}, :require-aliases {hooks helix.hooks, c helix.children, d helix.dom}, :requires [vura.core toddler.layout helix.core helix.hooks helix.children helix.dom], :refer {round-number {:require vura.core, :sym round-number}, *container-dimensions* {:require toddler.layout, :sym *container-dimensions*}, defnc {:require helix.core, :sym defnc}, defhook {:require helix.core, :sym defhook}, $ {:require helix.core, :sym $}, provider {:require helix.core, :sym provider}, memo {:require helix.core, :sym memo}}}, toddler.md.lazy {:css [], :ns toddler.md.lazy, :ns-meta {}, :require-aliases {hooks helix.hooks}, :requires [helix.core helix.hooks shadow.loader], :refer {$ {:require helix.core, :sym $}, defnc {:require helix.core, :sym defnc}, defhook {:require helix.core, :sym defhook}}}, toddler.ui.tables {:css [{:line 57, :column 17, :end-line 63, :end-column 41, :form [:w-7 :p-1 :color-- :rounded-sm :flex :justify-center :items-center ["&:hover" :color]]} {:line 64, :column 16, :end-line 65, :end-column 28, :form [:shadow-md]} {:line 66, :column 18, :end-line 76, :end-column 51, :form [:flex :text-xxs :justify-start :wrap :p-1 :font-semibold :shadow-lg {:border-radius "3px", :background-color "var(--tooltip-bg)", :color "var(--tooltip-color)"}]} {:line 77, :column 17, :end-line 78, :end-column 64, :form [{:color "var(--button-positive-hover-color)"}]} {:line 81, :column 20, :end-line 81, :end-column 49, :form [{:padding-top "0.45em"}]} {:line 135, :column 32, :end-line 135, :end-column 46, :form [:text-xs]} {:line 137, :column 22, :end-line 147, :end-column 61, :form [:flex :items-center :py-2 :font-bold ["& .decorator" :text-transparent {:transition "color .2s ease-in-out", :position "absolute", :right "0px"}] ["&:hover .decorator" :text-gray-400]]} {:line 171, :column 15, :end-line 176, :end-column 33, :form [:text-xs :outline-none :py-2 :w-full {:resize "none"}]} {:line 207, :column 31, :end-line 219, :end-column 82, :form [:py-2 :grow :flex :text-xs ["& .clear" :self-center :text-transparent {:transition "color .2s ease-in-out", :position "absolute", :right "0px"}] ["&:hover .clear " :text-gray-400] ["& .clear:hover" :text-gray-900 :cursor-pointer]]} {:line 221, :column 21, :end-line 221, :end-column 35, :form [:text-xs]} {:line 262, :column 18, :end-line 267, :end-column 25, :form [:outline-none :border-0 :text-xs :w-full :py-2]} {:line 310, :column 18, :end-line 314, :end-column 25, :form [:border-0 :outline-0 :text-xs :py-2]} {:line 380, :column 14, :end-line 393, :end-column 65, :form [:py-2 :flex :grow :text-xs ["& .clear" :text-md :self-center :text-transparent {:transition "color .2s ease-in-out", :position "absolute", :right "0px"}] ["&:hover .clear " :text-gray-400] ["& .clear:hover" :text-gray-900 :cursor-pointer]]} {:line 402, :column 22, :end-line 405, :end-column 39, :form [:w-10 :font-bold :cursor-pointer]} {:line 461, :column 17, :end-line 469, :end-column 56, :form [:text-xs :w-5 :h-5 :flex :rounded-sm :justify-center :items-center {:transition "color .3s ease-in-out"}]} {:line 470, :column 17, :end-line 470, :end-column 31, :form [:color++]} {:line 471, :column 19, :end-line 471, :end-column 34, :form [:color--]} {:line 473, :column 15, :end-line 474, :end-column 22, :form [:py-2]} {:line 486, :column 22, :end-line 486, :end-column 37, :form [:w-6 :h-6]} {:line 518, :column 23, :end-line 518, :end-column 44, :form [:text-xs :pl-10]} {:line 520, :column 22, :end-line 531, :end-column 61, :form [:flex :items-center :py-2 {:max-height "40px", :position "relative"} ["& .decorator" :text-transparent {:transition "color .2s ease-in-out", :position "absolute", :right "0px"}] ["&:hover .decorator" :text-gray-400]]} {:line 533, :column 25, :end-line 543, :end-column 58, :form [:border :border-solid :border-gray-500 :w-6 :h-6 :absolute {:border-radius "30px", :left "-32px", :top "50%", :background-color "var(--avatar-bg)", :transform "translateY(-50%)"}]} {:line 569, :column 17, :end-line 576, :end-column 41, :form [:text-xs :outline-none :w-full :flex :justify-center {:resize "none", :padding-top "0.7em"}]} {:line 585, :column 3, :end-line 596, :end-column 45, :form [:flex :text-xs :font-bold :flex-col :h-full :justify-between :m-1 :grow ["& .header" :flex :row] ["& .header .row" :cursor-pointer :font-bold] ["& .sort-marker.hidden" {:opacity "0"}]]} {:line 629, :column 17, :end-line 645, :end-column 42, :form [:flex :flex-col :m-0 :p-2 :bg-gray-100 :shadow-xl :rounded-xl :border-2 :border :border-gray-100 {:box-shadow "0 11px 25px -5px rgb(0 0 0 / 9%), 0 4px 20px 0px rgb(0 0 0 / 14%)"} ["& .simplebar-scrollbar:before" :bg-gray-100 :pointer-events-none {:max-height "400px"}]]} {:line 653, :column 3, :end-line 674, :end-column 50, :form [:flex :column :grow :text-neutral-600 :border :border-solid :rounded-md :shadow-lg {:background-color "var(--table-bg)", :border-color "var(--table-border)", :color "var(--table-text)"} ["& .tcell" :overflow-hidden] ["& .trow" :my-1 :border-b :border-transparent {:min-height "2em", :transition "all .5s ease-in-out"}] ["& .trow:hover, & .trow:focus-within" :border-b {:border-color "var(--table-hover-border)", :background-color "var(--table-hover-bg)"}]]} {:line 725, :column 25, :end-line 731, :end-column 61, :form [:flex :p-3 :border-1 :border-transparent ["& .simplebar-scrollbar:before" {:visibility "hidden"}] ["& .trow" :items-start :flex]]}], :ns toddler.ui.tables, :ns-meta {}, :require-aliases {i18n toddler.i18n, popup toddler.popup, table toddler.table, layout toddler.layout, hooks helix.hooks, dropdown toddler.dropdown, e toddler.ui.elements, c helix.children, ui toddler.ui, str clojure.string, outlined toddler.material.outlined, d helix.dom}, :requires [goog.string clojure.string helix.dom helix.core helix.hooks helix.children shadow.css toddler.core toddler.ui.fields toddler.material.outlined toddler.fav6.solid toddler.table toddler.popup toddler.layout toddler.dropdown toddler.input toddler.ui.elements toddler.ui toddler.i18n], :refer {! {:require toddler.ui, :sym !}, provider {:require helix.core, :sym provider}, use-dimensions {:require toddler.core, :sym use-dimensions}, $dropdown-popup {:require toddler.ui.fields, :sym $dropdown-popup}, defnc {:require helix.core, :sym defnc}, barcode {:require toddler.fav6.solid, :sym barcode}, css {:require shadow.css, :sym css}, $ {:require helix.core, :sym $}, use-translate {:require toddler.core, :sym use-translate}, defhook {:require helix.core, :sym defhook}, AutosizeInput {:require toddler.input, :sym AutosizeInput}, use-delayed {:require toddler.core, :sym use-delayed}, TextAreaElement {:require toddler.input, :sym TextAreaElement}}}, toddler.i18n.uuid {:css [], :ns toddler.i18n.uuid, :ns-meta {}, :require-aliases {i18n toddler.i18n}, :requires [toddler.i18n toddler.util], :refer {deep-merge {:require toddler.util, :sym deep-merge}}}, toddler.dropdown {:css [], :ns toddler.dropdown, :ns-meta {}, :require-aliases {hooks helix.hooks, d helix.dom, c helix.children, popup toddler.popup}, :requires [clojure.string helix.core helix.hooks helix.dom helix.children toddler.core toddler.popup], :refer {defhook {:require helix.core, :sym defhook}, defnc {:require helix.core, :sym defnc}, create-context {:require helix.core, :sym create-context}, $ {:require helix.core, :sym $}, use-idle {:require toddler.core, :sym use-idle}}}}}