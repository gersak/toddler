(ns {{project}}.main
  {:shadow.css/include
   ["{{project-folder}}/main.css"]}
  (:require
   ["react-dom/client" :refer [createRoot]]
   [goog.string :refer [format]]
   [shadow.css :refer [css]]
   [helix.core :refer [$ defnc provider]]
   [helix.dom :as d]
   [helix.hooks :as hooks]
   [toddler.app :as app]
   [toddler.ui :as ui]
   [toddler.i18n.time]
   [toddler.core :as toddler]
   [toddler.popup :as popup]
   [toddler.layout :as layout]
   [toddler.ui.components :refer [components]]
   [toddler.ui.css :as ui.css]
   [toddler.notifications :as notifications]
   [toddler.md :as md]
   [toddler.material.outlined :as outlined]
   [toddler.fav6.brands :as brands]
   [toddler.window :refer [wrap-window-provider]]
   [toddler.router :as router]
   [{{project}}.docs :refer [Docs]]))

(defonce root (atom nil))

(def goku "https://giphy.com/embed/fmMdxlVwsCmTtA4V6a")

(defnc GiphyEmbed [{:keys [src width height]}]
  (d/div
   {:dangerouslySetInnerHTML
    #js {:__html (format
                  "<iframe src=\"%s\" width=\"%s\" height=\"%s\" style=\" \" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p><a href=\"https://giphy.com/gifs/studiosoriginals-2yLNN4wTy7Zr8JSXHB\"></a></p>"
                  src width height)}}))

(defnc actions
  [{:keys [theme on-theme-change]}]
  (d/div
   {:className (css :absolute :top-1 :right-1 :flex
                    :h-10
                    :flex-row-reverse
                    :pr-1
                    :box-border
                    ["& .wrapper"
                     :items-center :flex :items-center {:font-size "24px"} :mr-4
                     :cursor-pointer :color-inactive]
                    ["& .wrapper:first-child" :mr-0]
                    ["& .tooltip-popup-area:hover" :color-normal])}
   (d/div
    {:className "wrapper"}
    ($ ui/tooltip {:message "Change theme"}
       (d/div
        {:on-click (fn []
                     (on-theme-change
                      (case theme
                        ("dark" 'dark) "light"
                        ("light" 'light) "dark"
                        "light")))}
        (if (= "dark" theme)
          ($ outlined/light-mode)
          ($ outlined/dark-mode)))))
   (d/div
    {:className "wrapper"}
    ($ ui/tooltip {:message "Open Github project"}
       (d/a
        {:href "https://github.com/gersak/toddler"}
        ($ brands/github))))
   (d/div
    {:className "wrapper"}
    ($ ui/tooltip {:message "API Docs"}
       (d/a
        {:href "https://gersak.github.io/toddler/codox/index.html"
         :className (css :text-base :font-bold :no-underline :select-none)}
        "API")))))

(defnc Greeting
  {:wrap [(router/wrap-rendered ::greeting)
          (router/wrap-link
           ::router/ROOT
           [{:id ::greeting
             :segment "greeting"
             :landing 10}])]}
  []
  (let [[theme set-theme!] (toddler/use-theme-state)
        scale 0.7]
    ($ ui/row {:align :center
               :className (css :w-full :h-full)}
       ($ ui/column
          {:style {:max-width 400}
           :className (css :p-8 :border :border-normal
                           :rounded-lg :relative :bg-normal+)
           :align :center}
          ($ actions {:on-theme-change set-theme! :theme theme})
          ($ ui/row
             {:align :center
              :className (css
                          ["& .message" {:max-width "300px"}]
                          ["& h1" :mb-6 {:font-size "32px"}]
                          ["& p" :mt-2 {:font-size "12px"}]
                          ["& a" {:color "var(--link-color)" :font-weight "600"}]
                          ["& .toddler-markdown" :my-6 #_{:margin-bottom "8px !important"}])}
             (d/div
              {:className "message"}
              (d/h1 "Toddler")
              ($ md/watch-url {:url "docs/greeting.md"})))

          ($ ui/row
             {:align :center}
             (d/div
              {:className (css :border :border-normal :rounded-lg :overflow-hidden)}
              ($ GiphyEmbed {:src goku
                             :width (* 265 scale)
                             :height (* scale 200)})))))))

(defnc App
  {:wrap [(router/wrap-landing "/" false)
          (router/wrap-router)
          (popup/wrap-container)
          (md/wrap-show {:className ui.css/$md})
          (notifications/wrap-store {:class ui.css/$store})
          (wrap-window-provider)
          (ui/wrap-ui components)]}
  []
  (let [[locale set-locale!] (hooks/use-state :hr)
        [theme set-theme!] (toddler/use-theme-state)]
    (provider
     {:context app/locale
      :value locale}
     (provider
      {:context app/theme
       :value theme}
      ($ Greeting)
      ($ Docs)))))

(defn ^:dev/after-load start! []
  (let [target ^js (.getElementById js/document "app")]
    (when-not @root
      (reset! root ^js (createRoot target)))
    (.render ^js @root ($ App))))
